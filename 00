Schimbari:
1.ClientPeer
      public ClientPeer(String sender1, Socket socketObject) throws IOException {
        mUserName = sender1;
        socket = socketObject;
        outputStream = new ObjectOutputStream(socketObject.getOutputStream());
    }

    public void sendMessage(String message) throws IOException {
        outputStream.writeObject(new Message(mUserName, message));
    }

    public void sendMessage(String message, String recipient) throws IOException {
        PrivateMessage object2 = new PrivateMessage(recipient, mUserName, message);
        outputStream.writeObject(object2);
    }

   @Override
    public void run() {
        try {
            inputStream = new ObjectInputStream(socket.getInputStream());
            while (true) {
                jTextArea.append(inputStream.readObject().toString() + "\n");
                //Message message = (Message) inputStream.readObject();
                //System.out.println(message.toString());
            }
        } catch (IOException | ClassNotFoundException e) {
            System.out.println(e);
        }
    }
    public void setUsername(String newUserName) {
        mUserName = newUserName;
    } 
   
   public void setOutputPane(JTextArea textArea) {
        jTextArea = textArea;
    }



2.GUICLIENT
package seriaf.poo.client.gui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.io.IOException;
import java.net.Socket;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import seriaf.poo.client.ClientPeer;

public class GuiClient extends JFrame {

    private final ClientPeer clientPeer;
    private final Socket socket;
    private JPanel topPanel;
    private JPanel midPanel;
    private JPanel botPanel;
    private JLabel mSenderNameLabel;
    private JTextField mSenderTextField;
    private JButton mChangeSenderButton;
    private JTextArea mMessageDisplayTextArea;
    private JTextField mMessageTextField;
    private JButton mSendMessageButton;
    private JScrollPane mMessageAreaScrollPane;

    public GuiClient(Socket socket1, String sender) throws IOException {
        super("Chat Client");
        initComponents();
        socket = socket1;
        clientPeer = new ClientPeer(sender, socket);
        clientPeer.setOutputPane(mMessageDisplayTextArea);
    }

    public static void main(String[] args) {
        try {
            Socket socket = new Socket(args[1], Integer.parseInt(args[2]));
            GuiClient guiClient = new GuiClient(socket, args[0]);
            guiClient.display();
        } catch (IOException e) {
            System.out.println(e);
        }
    }

    public void display() throws IOException {
        clientPeer.start();
        clientPeer.sendMessage("*I'm connected!*"); 
        pack();
        setResizable(false);
        setVisible(true);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
    }

    private void initComponents() {
        setLayout(new BorderLayout());
        topPanel = new JPanel(new FlowLayout());
        topPanel.setBackground(new Color(217, 217, 217));
        midPanel = new JPanel(new FlowLayout());
        midPanel.setBackground(new Color(217, 217, 217));
        botPanel = new JPanel(new FlowLayout());
        botPanel.setBackground(new Color(217, 217, 217));

        mSenderNameLabel = new JLabel("Name:");
        mSenderNameLabel.setFont(new Font("Arial", Font.PLAIN, 12));

        mSenderTextField = new JTextField("NewUser", 22);
        mSenderTextField.setFont(new Font("Arial", Font.PLAIN, 12));
        mChangeSenderButton = new JButton("Change Name");
        mChangeSenderButton.setFont(new Font("Arial", Font.PLAIN, 12));

        mMessageDisplayTextArea = new JTextArea(20, 37);
        mMessageDisplayTextArea.setEditable(false); // makes it read only
        mMessageDisplayTextArea.setLineWrap(true);
        mMessageDisplayTextArea.setWrapStyleWord(true);
        mMessageDisplayTextArea.setBackground(new Color(85, 172, 238));
        mMessageDisplayTextArea.setFont(new Font("Tahoma", Font.BOLD, 12));
        mMessageDisplayTextArea.setForeground(new Color(255, 255, 255));
        mMessageAreaScrollPane = new JScrollPane(mMessageDisplayTextArea);

        mMessageTextField = new JTextField(31);
        mMessageTextField.setFont(new Font("Arial", Font.PLAIN, 12));

        mSendMessageButton = new JButton("Send");
        mSendMessageButton.setFont(new Font("Arial", Font.PLAIN, 12));

        topPanel.add(mSenderNameLabel);
        topPanel.add(mSenderTextField);
        topPanel.add(mChangeSenderButton);
        midPanel.add(mMessageAreaScrollPane);
        botPanel.add(mMessageTextField);
        botPanel.add(mSendMessageButton);

        add(topPanel, BorderLayout.NORTH);
        add(midPanel, BorderLayout.CENTER);
        add(botPanel, BorderLayout.SOUTH);

        mChangeSenderButton.addActionListener((ActionEvent e) -> {
            clientPeer.setUsername(mSenderTextField.getText());
            try {
                clientPeer.sendMessage("*Changed my name to " + mSenderTextField.getText() + "*");
            } catch (IOException ex) {
                System.out.println(ex.getMessage());
            }
        });

        mSendMessageButton.addActionListener((ActionEvent e) -> {
            try {
                String line = mMessageTextField.getText();
                if (line.equals("/q")) {
                    mMessageDisplayTextArea.append("System message: You have been disconected!\n");
                    socket.close();
                    System.exit(0);
                }
                String[] array = line.split(" ");
                int size = array.length;
                if (line.startsWith("/w")) {
                    if (size >= 3) {
                        String name1 = array[1];
                        String message1 = line.substring(4 + name1.length());
                        clientPeer.sendMessage(message1, name1);
                    } else {
                        clientPeer.sendMessage(line);
                    }
                } else {
                    clientPeer.sendMessage(line);
                }
                mMessageTextField.setText("");
            } catch (IOException ex) {
                // client disconnected gracefully so do nothing
            }
        });
    }
}

